package main

import (
	"flag"
	"log"
	"net/http"
	"os"
	"strconv"

	_ "mowa/docs" // This is generated by swag

	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	echoSwagger "github.com/swaggo/echo-swagger"
)

// @title Mowa API
// @version 1.0
// @description A simple API for sending messages and managing file storage
// @termsOfService http://swagger.io/terms/

// @x-logo {"url":"/assets/mowa-logo.png","altText":"Mowa Logo"}

// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host localhost:8080
// @BasePath /

// @securityDefinitions.apikey ApiKeyAuth
// @in header
// @name Authorization

func main() {
	// Parse command line flags
	var configPath string
	flag.StringVar(&configPath, "config", "", "Path to configuration file (optional)")
	flag.Parse()

	// Load configuration
	var err error
	appConfig, err = loadConfig(configPath)
	if err != nil {
		log.Fatalf("Failed to load configuration: %v", err)
	}

	// Get port from environment variable or use default 8080
	port := getPort()

	log.Printf("ðŸš€ Mowa server starting on http://localhost:%d", port)

	// Create Echo instance
	e := echo.New()

	// Custom logger configuration for nicer output
	loggerConfig := middleware.LoggerConfig{
		Format:           "${time_rfc3339} | ${status} | ${latency} | ${remote_ip} | ${method} ${uri}\n",
		CustomTimeFormat: "2006/01/02 15:04:05",
	}

	// Middleware
	e.Use(middleware.LoggerWithConfig(loggerConfig))
	e.Use(middleware.Recover())
	e.Use(middleware.CORSWithConfig(middleware.CORSConfig{
		AllowOrigins: []string{"*"},
		AllowMethods: []string{http.MethodGet, http.MethodPost, http.MethodPut, http.MethodDelete, http.MethodOptions},
		AllowHeaders: []string{echo.HeaderOrigin, echo.HeaderContentType, echo.HeaderAccept, echo.HeaderAuthorization},
	}))

	// Root endpoint - redirect to Swagger documentation
	e.GET("/", func(c echo.Context) error {
		return c.Redirect(http.StatusMovedPermanently, "/swagger/index.html")
	})

	// Custom Swagger UI with logo
	e.GET("/swagger/index.html", func(c echo.Context) error {
		html := `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Mowa API Documentation</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css" >
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>
        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }
        *, *:before, *:after {
            box-sizing: inherit;
        }
        body {
            margin:0;
            background: #fafafa;
        }
        .swagger-ui .topbar {
            background-color: #2c3e50;
            padding: 10px 0;
        }
        .swagger-ui .topbar .download-url-wrapper {
            display: none;
        }
        .custom-header {
            text-align: center;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            margin-bottom: 20px;
        }
        .logo-container {
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 15px;
        }
        .logo {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            margin-right: 20px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        .title-section h1 {
            margin: 0;
            font-size: 2.5em;
            font-weight: 300;
        }
        .title-section p {
            margin: 10px 0 0 0;
            font-size: 1.2em;
            opacity: 0.9;
        }
        .version-badge {
            background: rgba(255,255,255,0.2);
            padding: 5px 15px;
            border-radius: 20px;
            font-size: 0.9em;
            margin-top: 10px;
            display: inline-block;
        }
    </style>
</head>
<body>
    <div class="custom-header">
        <div class="logo-container">
            <img src="/assets/mowa-logo.png" alt="Mowa Logo" class="logo">
            <div class="title-section">
                <h1>mowa</h1>
                <p>MacOS Web API Documentation</p>
                <div class="version-badge">v1.0</div>
            </div>
        </div>
    </div>
    <div id="swagger-ui"></div>
    <script src="./swagger-ui-bundle.js"> </script>
    <script src="./swagger-ui-standalone-preset.js"> </script>
    <script>
    window.onload = function() {
        const ui = SwaggerUIBundle({
            url: '/swagger/doc.json',
            dom_id: '#swagger-ui',
            deepLinking: true,
            presets: [
                SwaggerUIBundle.presets.apis,
                SwaggerUIStandalonePreset
            ],
            plugins: [
                SwaggerUIBundle.plugins.DownloadUrl
            ],
            layout: "StandaloneLayout",
            validatorUrl: null,
            docExpansion: "list",
            defaultModelsExpandDepth: 1,
            defaultModelExpandDepth: 1,
            displayRequestDuration: true,
            filter: true,
            showExtensions: true,
            showCommonExtensions: true
        });
    }
    </script>
</body>
</html>`
		return c.HTML(http.StatusOK, html)
	})

	// Serve static assets (logo)
	e.Static("/assets", "assets")

	// Serve swagger.json
	e.GET("/swagger/doc.json", func(c echo.Context) error {
		return c.File("docs/swagger.json")
	})

	// Swagger documentation (for other swagger assets)
	e.GET("/swagger/*", echoSwagger.WrapHandler)

	// API routes
	api := e.Group("/api")
	{
		// Messages endpoint
		api.POST("/messages", handleSendMessages)

		// Uptime endpoint
		api.GET("/uptime", handleGetUptime)

		// Storage endpoint (GET and POST) - supports both JSON payload and URL path
		api.GET("/storage", handleStorage)
		api.POST("/storage", handleStorage)

		// Storage endpoint with path in URL (GET only)
		api.GET("/storage/*", handleStorageWithPath)
	}

	// Start server
	log.Fatal(e.Start(":" + strconv.Itoa(port)))
}

// getPort returns the port from environment variable or default 8080
func getPort() int {
	portStr := os.Getenv("MOWA_PORT")
	if portStr == "" {
		return 8080
	}

	port, err := strconv.Atoi(portStr)
	if err != nil {
		log.Printf("Invalid port %s, using default 8080", portStr)
		return 8080
	}

	return port
}
